#!/usr/bin/env ruby

# Copyright, 2014, by Samuel G. D. Williams. <http://www.codeotaku.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'rubygems'
require 'rake'

require_relative '../lib/utopia/version'

require 'fileutils'
require 'find'
require 'rake'

$app = Rake.application = Rake::Application.new
$app.init('Utopia')

module Setup
	DIRECTORIES = ["cache", "cache/meta", "cache/body", "lib", "pages", "public", "tmp"]
	SYMLINKS = {"public/_static" => "../pages/_static"}
	
	CONFIGURATION_FILES = ['config.ru', 'Gemfile', 'Rakefile']
	
	# Removed during upgrade process
	OLD_DIRECTORIES = ["access_log"]
end

task :create do
	$stderr.puts("Usage: #{File.basename $0} create $path") & exit if ARGV.size != 2 
	
	destination_root = File.expand_path(ARGV.last, Dir.getwd)
	setup_root = File.expand_path("../../setup", __FILE__)
	
	$stderr.puts "Copying files from #{setup_root} to #{destination_root}..."
	
	Setup::DIRECTORIES.each do |directory|
		FileUtils.mkdir_p(File.join(destination_root, directory))
	end
	
	Find.find(setup_root) do |source_path|
		# What is this doing?
		destination_path = File.join(destination_root, source_path[setup_root.size..-1])
		
		if File.directory?(source_path)
			FileUtils.mkdir_p(destination_path)
		else
			if File.exist? destination_path
				$stderr.puts "\tFile already exists: #{destination_path}!"
			else
				$stderr.puts "\tCopying #{source_path} to #{destination_path}..."
				FileUtils.copy_entry(source_path, destination_path)
			end
		end
	end
	
	Setup::SYMLINKS.each do |path, target|
		FileUtils.ln_s(target, File.join(destination_root, path))
	end
	
	Setup::CONFIGURATION_FILES.each do |configuration_file|
		destination_path = File.join(destination_root, configuration_file)
		
		$stderr.puts "Updating #{destination_path}..."
		
		buffer = File.read(destination_path).gsub('$UTOPIA_VERSION', Utopia::VERSION)
		File.open(destination_path, "w") { |file| file.write(buffer) }
	end

	if `which git`.strip == ""
		$stderr.puts "Now is a good time to learn about git : http://git-scm.com/"
	end
	
	Dir.chdir(destination_root) do
		unless File.exist? '.git'
			sh("git", "init")
			sh("git", "add", ".")
			sh("git", "commit", "-m", "Initial utopia site.")
		end
	end
	
	$stderr.puts "*** Thanks for using Utopia! ***"
	$stderr.puts "To start the server:\n\tcd #{ARGV.last}\n\trake server"
end

task :upgrade do
	$stderr.puts("Usage: #{File.basename $0} upgrade $path") & exit if ARGV.size != 2 
	
	destination_root = File.expand_path(ARGV.last || '.', Dir.getwd)
	setup_root = File.expand_path("../../setup", __FILE__)
	branch_name = "utopia-upgrade-#{Utopia::VERSION}"
	
	$stderr.puts "Upgrading #{destination_root}..."
	
	Dir.chdir(destination_root) do
		sh('git', 'checkout', '-b', branch_name)
	end
	
	Setup::DIRECTORIES.each do |directory|
		FileUtils.mkdir_p(File.join(destination_root, directory))
	end
	
	Setup::OLD_DIRECTORIES.each do |directory|
		path = File.join(destination_root, directory)
		$stderr.puts "\tRemoving #{path}..."
		FileUtils.rm_rf(path)
	end
	
	Setup::SYMLINKS.each do |path, target|
		FileUtils.ln_s(target, File.join(destination_root, path), force: true)
	end
	
	Setup::CONFIGURATION_FILES.each do |configuration_file|
		source_path = File.join(setup_root, configuration_file)
		destination_path = File.join(destination_root, configuration_file)
		
		$stderr.puts "Updating #{destination_path}..."
		
		FileUtils.copy_entry(source_path, destination_path)
		buffer = File.read(destination_path).gsub('$UTOPIA_VERSION', Utopia::VERSION)
		File.open(destination_path, "w") { |file| file.write(buffer) }
	end
	
	begin
		Dir.chdir(destination_root) do
			# Stage any files that have been changed or removed:
			sh("git", "add", "-u")
			
			# Stage any new files that we have explicitly added:
			sh("git", "add", *Setup::CONFIGURATION_FILES, *Setup::SYMLINKS.keys)
			
			# Commit all changes:
			sh("git", "commit", "-m", "Upgrade to utopia #{Utopia::VERSION}.")
			
			# Checkout master..
			sh("git", "checkout", "master")
			
			# and merge:
			sh("git", "merge", "--no-commit", "--no-ff", branch_name)
		end
	rescue RuntimeError
		$stderr.puts "** Detected error with upgrade, reverting changes. Some new files may still exist in tree. **"
		
		sh("git", "checkout", "master")
		sh("git", "branch", "-d", branch_name)
	end
	
	$stderr.puts "*** Thanks for using Utopia! ***"
end

# Add the following into sudoers for this to work correctly:
# Users in group wheel can execute all commands as user http with no password.
# %wheel ALL=(http) NOPASSWD: ALL

POST_RECEIVE = <<EOF
#!/usr/bin/env ruby

require 'etc'

def sh(*args)
	puts "-> #{args.join(' ')}"
	system(*args)
end

working_tree = `git config core.worktree`.chomp

puts "Updating Site #{working_tree}..."

working_tree_stat = File.stat(working_tree)
deploy_user = Etc.getpwuid(working_tree_stat.uid).name
deploy_group = Etc.getgrgid(working_tree_stat.gid).name

puts "Updating permissions..."

Dir.chdir(working_tree) do
	sh("chmod -Rf ug+rwX .")
	sh("chown -Rf #{deploy_user}:#{deploy_group} .")

	puts "Updating site #{Dir.pwd} as #{deploy_user}:#{deploy_group}..."
	
	sh("sudo -u #{deploy_user} git checkout -f")
	sh("sudo -u #{deploy_user} git submodule update -i")
	
	if File.exist? 'Gemfile'
		sh("sudo -u #{deploy_user} bundle install --deployment")
	end
	
	ENV['DEPLOY_USER'] = deploy_user
	ENV['DEPLOY_GROUP'] = deploy_group
	
	if File.exist? 'Rakefile'
		sh("rake deploy") rescue nil
	end
	
	puts "Restarting server..."
	sh("sudo -u #{deploy_user} mkdir -p tmp && touch tmp/restart.txt")
end

EOF

namespace :server do
	task :setup do
		deploy_user = ENV['DEPLOY_USER'] or 'http'
		deploy_group = ENV['DEPLOY_GROUP'] or deploy_user or 'http'
		
		$stderr.puts("Usage: #{File.basename $0} server:setup $path") & exit if ARGV.size != 2 
		destination_root = File.expand_path(ARGV.last || '.', Dir.getwd)
		
		FileUtils.mkdir_p File.join(destination_root, "public")
		FileUtils.mkdir_p File.join(destination_root, "tmp")
		
		Dir.chdir(destination_root) do
			# Shared allows multiple users to access the site with the same group:
			sh("sudo", "-u", deploy_user, "git", "init", "--shared")
			sh("sudo", "-u", deploy_user, "git", "config", "receive.denyCurrentBranch", "ignore")
			sh("sudo", "-u", deploy_user, "git", "config", "core.worktree", destination_root)
			
			File.open(".git/hooks/post-receive", "w") {|file| file.write(POST_RECEIVE)}
			FileUtils.chmod 0755, ".git/hooks/post-receive"
		end
		
		sh("chown", "-R", "#{deploy_user}:#{deploy_group}", destination_root)
	end
end

task :help do
	$stderr.puts "To create a new site, use the create task:"
	$stderr.puts "\t#{File.basename($0)} create path/to/www.example.com"
	
	$stderr.puts "To upgrade an existing site, use the upgrade task:"
	$stderr.puts "\t#{File.basename($0)} upgrade path/to/www.example.com"
end

task :default => :help

$app.top_level
