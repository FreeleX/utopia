#!/usr/bin/env ruby

# Copyright, 2014, by Samuel G. D. Williams. <http://www.codeotaku.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'rubygems'
require 'rake'

require_relative '../lib/utopia/version'

require 'fileutils'
require 'find'
require 'rake'

$app = Rake.application = Rake::Application.new
$app.init('Utopia')

module Setup
	BASE = File.expand_path("../../setup", __FILE__)
	
	module Site
		CONFIGURATION_FILES = ['config.ru', 'Gemfile', 'Rakefile', 'README.md']
		
		DIRECTORIES = ["cache", "cache/meta", "cache/body", "lib", "pages", "public", "tmp"]
		SYMLINKS = {"public/_static" => "../pages/_static"}
		
		# Removed during upgrade process
		OLD_DIRECTORIES = ["access_log"]
		
		ROOT = File.join(BASE, 'site')
	end
	
	module Server
		ROOT = File.join(BASE, 'server')
	end
end

task :create do
	$stderr.puts("Usage: #{File.basename $0} create $path") & exit if ARGV.size != 2 
	
	destination_root = File.expand_path(ARGV.last, Dir.getwd)
	
	$stderr.puts "Copying files from #{Setup::Site::ROOT} to #{destination_root}..."
	
	Setup::Site::DIRECTORIES.each do |directory|
		FileUtils.mkdir_p(File.join(destination_root, directory))
	end
	
	Find.find(Setup::Site::ROOT) do |source_path|
		# What is this doing?
		destination_path = File.join(destination_root, source_path[Setup::Site::ROOT.size..-1])
		
		if File.directory?(source_path)
			FileUtils.mkdir_p(destination_path)
		else
			unless File.exist? destination_path
				FileUtils.copy_entry(source_path, destination_path)
			end
		end
	end
	
	Setup::Site::SYMLINKS.each do |path, target|
		FileUtils.ln_s(target, File.join(destination_root, path), force: true)
	end
	
	Setup::Site::CONFIGURATION_FILES.each do |configuration_file|
		destination_path = File.join(destination_root, configuration_file)
		
		buffer = File.read(destination_path).gsub('$UTOPIA_VERSION', Utopia::VERSION)
		
		File.open(destination_path, "w") { |file| file.write(buffer) }
	end
	
	Dir.chdir(destination_root) do
		if `which bundle`.strip != ''
			puts "Generating initial package list with bundle..."
			sh("bundle", "install")
		end
		
		if `which git`.strip == ""
			$stderr.puts "Now is a good time to learn about git : http://git-scm.com/"
		elsif !File.exist?('.git')
			puts "Setting up git repository..."
			sh("git", "init")
			sh("git", "add", ".")
			sh("git", "commit", "-m", "Initial Utopia v#{Utopia::VERSION} site.")
		end
	end
	
	puts "Thank you for using Utopia!"
	puts "We sincerely hope that Utopia helps to make your life easier and more enjoyable. ~ Samuel."
	
	puts "For your next steps, please checkout the README.md file in your new site!"
end

task :upgrade do
	$stderr.puts("Usage: #{File.basename $0} upgrade $path") & exit if ARGV.size != 2 
	
	destination_root = File.expand_path(ARGV.last || '.', Dir.getwd)
	branch_name = "utopia-upgrade-#{Utopia::VERSION}"
	
	$stderr.puts "Upgrading #{destination_root}..."
	
	Dir.chdir(destination_root) do
		sh('git', 'checkout', '-b', branch_name)
	end
	
	Setup::Site::DIRECTORIES.each do |directory|
		FileUtils.mkdir_p(File.join(destination_root, directory))
	end
	
	Setup::Site::OLD_DIRECTORIES.each do |directory|
		path = File.join(destination_root, directory)
		$stderr.puts "\tRemoving #{path}..."
		FileUtils.rm_rf(path)
	end
	
	Setup::Site::SYMLINKS.each do |path, target|
		FileUtils.ln_s(target, File.join(destination_root, path), force: true)
	end
	
	Setup::Site::CONFIGURATION_FILES.each do |configuration_file|
		source_path = File.join(Setup::Site::ROOT, configuration_file)
		destination_path = File.join(destination_root, configuration_file)
		
		$stderr.puts "Updating #{destination_path}..."
		
		FileUtils.copy_entry(source_path, destination_path)
		buffer = File.read(destination_path).gsub('$UTOPIA_VERSION', Utopia::VERSION)
		File.open(destination_path, "w") { |file| file.write(buffer) }
	end
	
	begin
		Dir.chdir(destination_root) do
			# Stage any files that have been changed or removed:
			sh("git", "add", "-u")
			
			# Stage any new files that we have explicitly added:
			sh("git", "add", *Setup::CONFIGURATION_FILES, *Setup::SYMLINKS.keys)
			
			# Commit all changes:
			sh("git", "commit", "-m", "Upgrade to utopia #{Utopia::VERSION}.")
			
			# Checkout master..
			sh("git", "checkout", "master")
			
			# and merge:
			sh("git", "merge", "--no-commit", "--no-ff", branch_name)
		end
	rescue RuntimeError
		$stderr.puts "** Detected error with upgrade, reverting changes. Some new files may still exist in tree. **"
		
		sh("git", "checkout", "master")
		sh("git", "branch", "-d", branch_name)
	end
	
	$stderr.puts "*** Thanks for using Utopia! ***"
end

namespace :server do
	task :create do
		$stderr.puts("Usage: #{File.basename $0} server:setup $path") & exit if ARGV.size != 2 
		destination_root = File.expand_path(ARGV.last || '.', Dir.getwd)
		
		FileUtils.mkdir_p File.join(destination_root, "public")
		FileUtils.mkdir_p File.join(destination_root, "tmp")
		
		Dir.chdir(destination_root) do
			# Shared allows multiple users to access the site with the same group:
			sh("git", "init", "--shared")
			sh("git", "config", "receive.denyCurrentBranch", "ignore")
			sh("git", "config", "core.worktree", destination_root)
			
			sh("cp", "-r", File.join(Setup::Server::ROOT, 'git', 'hooks'), File.join(destination_root, '.git'))
		end
	end
end

task :help do
	$stderr.puts "To create a new site, use the create task:"
	$stderr.puts "\t#{File.basename($0)} create path/to/www.example.com"
	
	$stderr.puts "To upgrade an existing site, use the upgrade task:"
	$stderr.puts "\t#{File.basename($0)} upgrade path/to/www.example.com"
	
	$stderr.puts "To create a remote deployment for an existing site, use the server:create task:"
	$stderr.puts "\t#{File.basename($0)} server:create /srv/http/www.example.com"
end

task :default => :help

$app.top_level
